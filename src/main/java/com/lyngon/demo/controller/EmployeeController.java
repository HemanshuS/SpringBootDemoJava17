/**
 * 
 */
package com.lyngon.demo.controller;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.lyngon.demo.dto.EmployeeSignUpDto;
import com.lyngon.demo.entity.Employee;
import com.lyngon.demo.exception.ApplicaionException;
import com.lyngon.demo.service.EmployeeService;
import com.lyngon.demo.vo.EmployeeVO;

import io.swagger.v3.oas.annotations.Operation;
import jakarta.validation.Valid;

/**
 * @author Himanshu
 *
 */

@RestController
@RequestMapping(path = "/", produces = MediaType.APPLICATION_JSON_VALUE)
public class EmployeeController {
	
	@Autowired
	private EmployeeService employeeService;
	
	@Autowired
	private ModelMapper modelMapper;
	
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	
//	@GetMapping("/csrf-token")
//	  public String getCsrfToken(CsrfToken token) {
//	    return token.getToken();
//	  }
//	
	/**
	 * 
	 * @return list of Employees 
	 */
	@Operation(summary = "Fetches all Employees.")
	@GetMapping(value="/getEmployees")
	public ResponseEntity<List<EmployeeSignUpDto>> getEmployees(){
		
		List<EmployeeSignUpDto> employeeSignUpDtos = employeeService.getEmployees().stream().map(employee -> modelMapper.map(employee, EmployeeSignUpDto.class))
				.collect(Collectors.toList());
		
		logger.info("No of Employees fetched for getEmployees call: {}",employeeSignUpDtos.size());
		return new ResponseEntity<>(employeeSignUpDtos,HttpStatus.OK);
	}
	
	/**
	 * 
	 * @param id
	 * @return EmployeeSignUpDto
	 * @throws ApplicaionException
	 */
	@Operation(summary = "Finds an Employee by Id.")
	@GetMapping(value="/getEmployeeById/{id}")
	public ResponseEntity<EmployeeSignUpDto> getEmployeeById(@PathVariable Integer id) throws ApplicaionException{
		
		
		
	
		Employee employee = employeeService.getEmployeebyId(id);
		
		if (employee == null) {
			
			throw new ApplicaionException("Employee not found with id: "+id);
			
		}
		
		
		EmployeeSignUpDto employeeSignUpDto = modelMapper.map(employee, EmployeeSignUpDto.class);
		
		logger.info("Employees fetched for getEmployeeById call for id: {}",id);
		
		return new ResponseEntity<>(employeeSignUpDto,HttpStatus.OK);
		
	}

	
	/**
	 * 
	 * @param employeeVO
	 * @return
	 */
	@Operation(summary = "Add new Employees.Employees Ids are autogenerated by system.")
	@PostMapping(value="/addEmployee")
	public ResponseEntity<EmployeeSignUpDto> addEmployee(@RequestBody @Valid EmployeeVO  employeeVO){
		
		Employee employee = employeeService.addEmployee(new Employee(employeeVO.getName(), employeeVO.getEmail(), 
				employeeVO.getAge(),employeeVO.getPhoneNumber()));
		
		logger.info("Employees added with id: {}", employee.getId());
		
		return new ResponseEntity<>(modelMapper.map(employee, EmployeeSignUpDto.class),HttpStatus.CREATED);
		
	}
	
	@Operation(summary = "Deletes an Employee by searching Id.")
	@DeleteMapping(value="/deleteEmployee/{id}")
	public ResponseEntity<Object> deleteEmployee(@PathVariable Integer id) throws ApplicaionException{
		
		var isRemoved = employeeService.deleteEmployee(id);
		
		if (!isRemoved) {
            //return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            
            throw new ApplicaionException("Employee not found with id: "+id);
            
        }

		logger.info("Employees deleted for id: {}", id);
        return new ResponseEntity<>("Entity deleted with id "+id, HttpStatus.OK);
		
		
	}
	
	/**
	 * 
	 * @param employeeSignUpDto
	 * @return
	 * @throws ApplicaionException
	 */
	@Operation(summary = "Updates an Employee detail.")
	@PutMapping(value="/updateEmployee")
	public ResponseEntity<Object> updateEmployee(@RequestBody @Valid EmployeeSignUpDto employeeSignUpDto) throws ApplicaionException{
		
		
		Employee employeeUpdated = employeeService.updateEmployee(modelMapper.map(employeeSignUpDto, Employee.class));
		
		if (employeeUpdated == null) {
			
			//return ResponseEntity.notFound().build();
			throw new ApplicaionException("Employee not found with id: "+ employeeSignUpDto.getId());
            
			
		}
		
		//return new ResponseEntity<>(employeeUpdated,HttpStatus.OK);
		logger.info("Employees updated for id: {}", employeeUpdated.getId());
		return ResponseEntity.ok(employeeUpdated);
		
	}

}
